Task: 

  The text is a sequence of separate sentences containing words and
punctuation marks. Convert text according to the sequence of editing commands,
  which should allow you to insert, delete, and replace specified words in certain sentences.

  Examples of editing commands:
Insert a new word in a sentence before the specified word, delete the punctuation mark in the sentence, and or all.

  Options for specifying a specific offer:
  A sentence ending with the specified word.

  Options for specifying a given word:
  Everything in a sentence that contains a given sequence of characters.


Conventions:

  The text can be stored as a two-dimensional list from the fourth task, but it is more complex.
  That is, an element of the list: a word as a pointer with arrays, spaces as an array with a space and their number,
              punctuation marks as a single element, including the transition to the next line with tabs.
              Each element can contain a marker or have a length.
  In short, the list is less strict and each element may contain multiple links.
  In addition, there must be both the source text and the processed ones.
  Modular representation.
  A simple unidirectional hierarchical list, as in the fourth task.
  Classes or custom types.
  All information presented in the program is stored once: pointers and dynamic memory.
  Several actions can be performed during a single program launch.
  It is better not to use a switch, because the blockchains will be overloaded.
  An input file with all ambiguous positions.
  The output file is divided into a detailed protocol and protocols. 
  The source text is represented by a list with arrows.
  The explanatory note is similar to the last semester, it is not considered without it.
  Explanatory illustrations.
  Block diagrams for the most important things, as in the fourth task.
  You need to make a menu with a selection of functions or a batch file.